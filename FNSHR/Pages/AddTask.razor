@page "/AddTask"
@using FNSHR.Models


<div class="background-grad p-5 m-5">
    <div class="alert alert-primary" role="alert">
        <h3 class="text-center">
            Add Task
        <br />
        <small class="text-muted">Please enter your task details.</small>
        </h3>
        </div>

<EditForm Model="@newTask" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />

    <label>Task Name</label>
    <InputText @bind-Value="newTask.Name"/>
    <ValidationMessage For="@(()=> newTask.Name)"/>
    <br />
    <br />
    <label>Deadline</label>
    <InputText @bind-Value="newTask.Deadline" />
    <ValidationMessage For="@(()=> newTask.Deadline)" />
    <br />
    <br />
    <label>Number of Points</label>
    <InputNumber @bind-Value="newTask.pledgedPoints" />
    <ValidationMessage For="@(()=> newTask.pledgedPoints)" />

    <br />
    <br />
        <button class="btn btn-primary" type="submit">Submit</button>
        <br />
        <br />

        @if(saved)
        {
            <p>Task added successfully!</p>
        }

        @if(error)
        {
            <p>Something went wrong - please check that every field has been entered correctly.</p>
        }

</EditForm>

</div>

<style type="text/css">

    .background-grad {
        background-color: #8BC6EC;
        background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);
    }
</style>


@inject Data.AppDbContext dbContext
@code {
    public toDo newTask = new toDo();

    public bool saved = false;
    public bool error = false;

    private async Task SubmitForm()
    {
        saved = false;
        error = false;
        try
        {
            dbContext.Tasks.Add(newTask);
            await dbContext.SaveChangesAsync();
            saved = true;
        }
        catch (Exception)
        {
            error = true;
            throw;
        }
    }

}
