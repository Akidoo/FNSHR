@page "/"

@inject NavigationManager _nav

<div class="background-grad p-5 m-5">
    <div class="alert alert-primary" role="alert">
        <h3 class="text-center">FNSHR</h3>
    </div>

    <div class="d-grid gap-2">
        <button class="btn btn-primary" @onclick="@(() => _nav.NavigateTo("/AddTask"))">Add Task</button>
    </div>

    <br />

    <ol class="list-group">
        @foreach (var task in toDoList)
        {
            <li class="list-group-item">
                @task.Name - @task.Deadline
                <button class="btn btn-primary btn-sm float-end" @onclick="(() => completeTask(task))">Mark as complete</button>
            </li>
        }
    </ol>

    <div class="d-grid gap-2 text-center">
        <button class="btn btn-primary" @onclick="(() => mergeSort(toDoList, 0, toDoList.Count - 1))">Sort Tasks</button>
       
    </div>
   
     <br />
        <br />

    <SearchBar Items="filteredToDoList" OnSearch="updateFilteredTasks"></SearchBar>
    <br />
    <ol class="list-group">
        @foreach (var filteredTask in filteredToDoList)
        {
            <li class="list-group-item">
                @filteredTask.Name - @filteredTask.Deadline
                
            </li>
        }
    </ol>
</div>
    
<style type="text/css">
    .background-grad {
        background-color: #8BC6EC;
        background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);
    }
</style>

@using FNSHR.Models
@using FNSHR.Services
@inject toDoService toDoService
@inject Data.AppDbContext dbContext

@code {
    List<toDo> toDoList = new List<toDo>();
    List<toDo> filteredToDoList = new List<toDo>();

    protected override async Task OnInitializedAsync()
    {
        toDoList = await toDoService.GetAllToDo();
        filteredToDoList = filteredToDoList;
    }

    void completeTask(toDo completedTask)
    {
        toDoList.Remove(completedTask);
    }

    /* void selectionSort(List<toDo> a)
    {
        for (int currentIndex = 0; currentIndex < a.Count - 1; currentIndex++)
        {
            int smallestIndex = currentIndex;

            for (int checkIndex = currentIndex + 1; checkIndex < a.Count; checkIndex++)
            {
                if (a[checkIndex].CompareTo(a[smallestIndex]) < 0)
                {
                    smallestIndex = checkIndex;
                }
            }

            toDo temp = a[smallestIndex];
            a[smallestIndex] = a[currentIndex];
            a[currentIndex] = temp;
        }
    } */

    void mergeSort(List<toDo> a, int left, int right)
    {
        if(left < right)
        {
            int mid = (left + right) / 2;

            mergeSort(a, left, mid);
            mergeSort(a, mid+1, right);


            Merge(a, mid, left, right);
        }
    }

    void Merge(List<toDo> a, int left, int mid, int right)
    {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        List<toDo> leftList = new List<toDo>(a.GetRange(left, n1));
        List<toDo> rightList = new List<toDo>(a.GetRange(mid + 1, n2));

        int i = 0;
        int j = 0;
        int k = left;

        while (i < n1 && j < n2)
        {
            if (String.Compare(leftList[i].Name, rightList[j].Name) <= 0)
            {
                a[k] = leftList[i];
                i++;
            }
            else
            {
                a[k] = rightList[j];
                j++;

            }
            k++;
        }

        while (j < n2)
        {
            a[k] = rightList[j];
            j++;
            k++;
        }
    }

    void updateFilteredTasks(string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredToDoList = filteredToDoList;
        }
        else
        {
            filteredToDoList = toDoList.Where(task => task.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    /*!To Do!
     - Userauth
        - DO NOT STORE PLAINTEXT PASSWORD IN DB. Use library to hash password and store the hash
     - Try to change selection sort to merge/quicksort (merge sort successful)
     -Try to implement fuzzy search
     */
}
